{
  "name": "pubsub.js",
  "description": "Vanilla JS Pubsub implementation with wildcards and inheritance",
  "version": "1.3.1",
  "author": {
    "name": "Wojciech DÅ‚ubacz",
    "email": "wdsahadar@gmail.com"
  },
  "directories": {
    "lib": ".",
    "test": "test"
  },
  "contributors": [],
  "repository": {
    "type": "git",
    "url": "git@github.com:Sahadar/pubsub.js.git"
  },
  "keywords": [
    "pubsub",
    "listener",
    "vanilla",
    "pub/sub",
    "publish/subscribe",
    "publish",
    "event",
    "emitter",
    "eventemitter",
    "subscribe"
  ],
  "engines": {
    "node": ">= 0.6.x"
  },
  "main": "pubsub.js",
  "licenses": [
    {
      "type": "MIT",
      "url": "http: //www.opensource.org/licenses/mit-license.php"
    }
  ],
  "readme": "pubsub.js\n=========\n\nJavaScript pubsub implementation with wildcards, inheritance and multisubscribtions\n\n[NPM pubsub.js link](https://npmjs.org/package/pubsub.js)\n\n[pubsub.js performance test](http://jsperf.com/pubsub-js-vs-jquery-events)\n\n## Features\n\n* Very fast\n* Easy to understand\n* Configurable\n* Dependency free\n* Using native JavaScript code\n* Works on server and browser side smoothly\n* Event inheritance\n* Wildcards\n* subscribeOnce method\n* Multiple subscribtions\n* Controll under event bubbling depth\n* Works with require.js library\n* Written with TDD\n* Possibility to make new instances of pubsub with private namespaces scope\n* Possibility to publish async events\n* Compiled + gzipped weight only 1kB\n* Works also on IE 6+\n\n## Examples\n\n### Basic example\n\n```javascript\n\t//subscribe to 'hello/world' namespace\n\tpubsub.subscribe('hello/world', function() {\n\t\tconsole.log('hello world!');\n\t});\n\t//publish event on 'hello/world' namespace\n\tpubsub.publish('hello/world');\n\t//prints \"hello world\" inside console\n```\n\n### Publish with parameter\n\n```javascript\n\t//subscribe to 'hello/world' namespace\n\tpubsub.subscribe('hello/world', function(data) {\n\t\tconsole.log(data);\n\t});\n\t//publish event on 'hello/world' namespace\n\tpubsub.publish('hello/world', ['hello!']); // second parameter is an array of arguments\n\t//prints \"hello!\" inside console\n```\n\n### Unsubscribe\n\n```javascript\n\t//subscribe to 'hello/world' namespace\n\tvar subscribtion = pubsub.subscribe('hello/world', function() {\n\t\tconsole.log('hello world!');\n\t});\n\t//publish event on 'hello/world' namespace\n\tpubsub.publish('hello/world');\n\t//prints \"hello world\" inside console\n\n\t//unsubscribe\n\tpubsub.unsubscribe(subscribtion);\n\t//publish event on 'hello/world' namespace\n\tpubsub.publish('hello/world');\n\t//nothing happen - we've previously unsubscribed that subscribtion\n```\n\n### Changing default configuration\n\n***Browser***\n\n**Before pubsub script loader** - make global variable named \"pubsub\" with your default configuration\n```javascript\n\tpubsub = {\n\t\tseparator : '.'\n\t}\n```\n**After pubsub load - use it with your configuration, pubsub.js will replace that previous \"pubsub\" global variable with its own instance**\n```javascript\n\t//subscribe to 'hello.world' namespace\n\tvar subscribtion = pubsub.subscribe('hello.world', function() {\n\t\tconsole.log('hello world!');\n\t});\n\t//publish event on 'hello.world' namespace\n\tpubsub.publish('hello.world');\n\t//prints \"hello world\" inside console\n\n\t//unsubscribe\n\tpubsub.unsubscribe(subscribtion);\n\t//publish event on 'hello.world' namespace\n\tpubsub.publish('hello.world');\n\t//nothing happen - we've previously unsubscribed that subscribtion\n```\n\n***Node.js***\n\n**Before pubsub require execution** - set global.pubsubConfig variable\n```javascript\n\tglobal.pubsubConfig = {\n\t\tseparator : '.'\n\t}\n```\n**After pubsub load, it'll have your configuration as in browser example**\n\n\n### Event inheritance\n\n```javascript\n\t//subscribe to 'hello' namespace\n\tvar subscribtion = pubsub.subscribe('hello', function() {\n\t\tconsole.log('hello world!');\n\t});\n\t//publish event on 'hello/world' namespace\n\tpubsub.publish('hello/world', [], {\n\t\trecurrent : true\n\t});\n\t//prints \"hello world\" inside console\n\t//first event goes to \"hello\" namespace\n\t//then it tries to execute on \"hello/world\" but nothing is listening on it\n```\n\n### Method: subscribeOnce\n\n```javascript\n\tvar iterator = 0;\n\tvar data = null;\n\n\tpubsub.subscribeOnce('hello/world', function(param) {\n\t\tdata = param;\n\t\titerator++;\n\t});\n\tpubsub.publish('hello/world', ['hello']);\n\tpubsub.publish('hello/world', ['world']);\n\tconsole.log(iterator); //1\n\tconsole.log(data); //'hello'\n```\n\n### Wildcard \"*\" <-- one namespace deeper\n\n```javascript\n\tvar number = 0;\n\n\t//subscribe to \"hello/world\" namespace\n\tpubsub.subscribe('hello/world', function() {\n\t\tnumber++;\n\t});\n\t//subscribe to \"hello/earth\" namespace\n\tpubsub.subscribe('hello/earth', function() {\n\t\tnumber++;\n\t});\n\t//subscribe to \"hello/galaxy\" namespace\n\tpubsub.subscribe('hello/galaxy', function() {\n\t\tnumber++;\n\t});\n\t//subscribe to \"hello/world/inner\" namespace\n\tpubsub.subscribe('hello/world/inner', function() {\n\t\tnumber++;\n\t});\n\n\tpubsub.publish('hello/*');\n\t//hello/* executes:\n\t//\thello/world, hello/earth, hello/galaxy\n\t//\tnamespace, hello/world/inner is not executed\n\t//\n\t//\t\"*\" goes only one namespace deeper\n\tconsole.log(number); //3\n```\n\n### Multiple subscribtion\n\n**many namespaces, one callback**\n```javascript\n\tvar number = 0;\n\n\tvar subscribtion = pubsub.subscribe(['hello/world', 'goodbye/world'], function() {\n\t\tnumber++;\n\t});\n\n\tpubsub.publish('hello/world');\n\tconsole.log(number); //1\n\tpubsub.publish('goodbye/world');\n\tconsole.log(number); //2\n\tpubsub.unsubscribe(subscribtion);\n\n\tpubsub.publish('hello/world');\n\tconsole.log(number); //2\n\tpubsub.publish('goodbye/world');\n\tconsole.log(number); //2\n```\n\n**one namespace, many callbacks**\n```javascript\n\tvar number1 = 0;\n\tvar number2 = 0;\n\n\tvar subscribtion = pubsub.subscribe('hello/world', [function() {\n\t\tnumber1++;\n\t}, function() {\n\t\tnumber2 += 2;\n\t}]);\n\n\tpubsub.publish('hello/world');\n\tconsole.log(number1 + ',' + number2); //1,2\n\tpubsub.unsubscribe(subscribtion);\n\n\tpubsub.publish('hello/world');\n\tconsole.log(number1 + ',' + number2); //2,4\n```\n\n**many namespaces, many callbacks**\n```javascript\n\tvar number1 = 0;\n\tvar number2 = 0;\n\n\tvar subscribtion = pubsub.subscribe(['hello/world', 'goodbye/world'], [function() {\n\t\tnumber1++;\n\t}, function() {\n\t\tnumber2 += 2;\n\t}]);\n\n\tpubsub.publish('hello/world');\n\tconsole.log(number1 + ',' + number2); //1,2\n\tpubsub.publish('goodbye/world');\n\tconsole.log(number1 + ',' + number2); //2,4\n\tpubsub.unsubscribe(subscribtion);\n\n\tpubsub.publish('hello/world');\n\tconsole.log(number1 + ',' + number2); //2,4\n\tpubsub.publish('goodbye/world');\n\tconsole.log(number1 + ',' + number2); //2,4\n```\n\n###making new instances with own namespaces scope\n```javascript\n\tvar number1 = 0;\n\tvar number2 = 0;\n\n\tvar privatePubsub = pubsub.newInstance();\n\n\tpubsub.subscribe('hello/world', function() {\n\t\tnumber1++;\n\t});\n\n\tprivatePubsub.subscribe('hello/world', function() {\n\t\tnumber2++;\n\t});\n\n\tpubsub.publish('hello/world');\n\tconsole.log(number1 + ',' + number2); //1,0\n\n\tprivatePubsub.publish('hello/world');\n\tconsole.log(number1 + ',' + number2); //1,1\n```\n\n**Using pubsub asynchronously**\n```javascript\n\tvar number1 = 0;\n\n\tvar asyncPubsub = pubsub.newInstance({\n\t\tasync : true\n\t});\n\n\tasyncPubsub.subscribeOnce('hello/world', function() {\n\t\tnumber1++;\n\t\tconsole.log(number1); //2\n\t});\n\n\tasyncPubsub.publish('hello/world'); // asynchronous call to 'hello/world'\n\n\tnumber1++;\n\tconsole.log(number1); //1\n```\n\n## Installation\nDownload from github or type `npm install pubsub.js`\n\nDefault pubsub.js configuration:\n```javascript\n\tseparator : '/' //defined namespace separator\n\trecurrent : false // defines inheritance of publish event\n\tasync \t  : false // if true - publish events will be asynchronous\n\tlog       : false // set to true will log unsubscribed namespaces to which You publish event\n```\n\n**Using pubsub inside node.js**\n```javascript\n\tvar pubsub = require('pubsub.js');\n\n\tpubsub.subscribe('hello/world', function(text) {\n\t\tconsole.log(text);\t\n\t});\n\tpubsub.publish('hello/world', ['my text']);\n```\n\n## Changelog\n* v1.3.1\n\t* Fixed problem with \"window reference error\" in node.js environment\n* v1.3.0\n\t* Changed the way of using context parameter in subscribe method - API changes to subscribe method!\n* v1.2.0\n\t* Changed the way of using event inheritance - API changes to publish method!\n\t* Added possibility to use \"publish\" asynchronously\n* v1.1.0\n\t* reworked core\n\t* changed the way of setting own config\n\t* implemented \"newInstance\" method\n* v1.0.6\n\t* Fixed bug with unsubscribtion - subscribtion during publish of the same namespace (test case 3)\n* v1.0.5\n\t* Added multisubscribtion possibilities\n* v1.0.4\n\t* Added subscribeOnce method\n* v1.0.3\n\t* Changed scope binding in pubsub\n* v1.0.2\n\t* Wildcard \"*\" added\n* v1.0.1\n\t* Improved performance - about 350% on chrome, 20% on firefox\n* v1.0.0\n\t* Every basic tests passing\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/Sahadar/pubsub.js/issues"
  },
  "_id": "pubsub.js@1.3.1",
  "dist": {
    "shasum": "8c0d22fe5bb46bc067253d7bb0d7cdfaa4224dec"
  },
  "_from": "pubsub.js@*",
  "_resolved": "https://registry.npmjs.org/pubsub.js/-/pubsub.js-1.3.1.tgz"
}
